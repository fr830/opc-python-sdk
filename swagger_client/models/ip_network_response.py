# coding: utf-8

"""
    IPNetworks

     An IP network allows you to define an IP subnet in your account. The size of the IP subnet and the set IP addresses in the subnet are determined by the IP address prefix that you specify while creating the IP network. These IP addresses aren't part of the common pool of Oracle-provided IP addresses used by the shared network. When you add an instance to an IP network, the instance is assigned an IP address in that subnet. You can assign IP addresses to instances either statically or dynamically, depending on your business needs. So you have complete control over the IP addresses assigned to your instances. For more information, see <a target=\"_blank\" href=\"http://www.oracle.com/pls/topic/lookup?ctx=stcomputecs&id=STCSG-GUID-B62FE52B-CD56-43D9-AB42-354D5C8C5AA1\">Managing IP Networks</a> in <em>Using Oracle Compute Cloud Service (IaaS)</em>

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpNetworkResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'ip_address_prefix': 'str',
        'ip_network_exchange': 'str',
        'name': 'str',
        'tags': 'list[str]',
        'uri': 'str'
    }

    attribute_map = {
        'description': 'description',
        'ip_address_prefix': 'ipAddressPrefix',
        'ip_network_exchange': 'ipNetworkExchange',
        'name': 'name',
        'tags': 'tags',
        'uri': 'uri'
    }

    def __init__(self, description=None, ip_address_prefix=None, ip_network_exchange=None, name=None, tags=None, uri=None):
        """
        IpNetworkResponse - a model defined in Swagger
        """

        self._description = None
        self._ip_address_prefix = None
        self._ip_network_exchange = None
        self._name = None
        self._tags = None
        self._uri = None

        if description is not None:
          self.description = description
        if ip_address_prefix is not None:
          self.ip_address_prefix = ip_address_prefix
        if ip_network_exchange is not None:
          self.ip_network_exchange = ip_network_exchange
        if name is not None:
          self.name = name
        if tags is not None:
          self.tags = tags
        if uri is not None:
          self.uri = uri

    @property
    def description(self):
        """
        Gets the description of this IpNetworkResponse.
        Description of the object.

        :return: The description of this IpNetworkResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this IpNetworkResponse.
        Description of the object.

        :param description: The description of this IpNetworkResponse.
        :type: str
        """

        self._description = description

    @property
    def ip_address_prefix(self):
        """
        Gets the ip_address_prefix of this IpNetworkResponse.
        CIDR IPv4 prefix associated with this IP network.

        :return: The ip_address_prefix of this IpNetworkResponse.
        :rtype: str
        """
        return self._ip_address_prefix

    @ip_address_prefix.setter
    def ip_address_prefix(self, ip_address_prefix):
        """
        Sets the ip_address_prefix of this IpNetworkResponse.
        CIDR IPv4 prefix associated with this IP network.

        :param ip_address_prefix: The ip_address_prefix of this IpNetworkResponse.
        :type: str
        """

        self._ip_address_prefix = ip_address_prefix

    @property
    def ip_network_exchange(self):
        """
        Gets the ip_network_exchange of this IpNetworkResponse.
        Name of the IP network exchange associated with this IP network.

        :return: The ip_network_exchange of this IpNetworkResponse.
        :rtype: str
        """
        return self._ip_network_exchange

    @ip_network_exchange.setter
    def ip_network_exchange(self, ip_network_exchange):
        """
        Sets the ip_network_exchange of this IpNetworkResponse.
        Name of the IP network exchange associated with this IP network.

        :param ip_network_exchange: The ip_network_exchange of this IpNetworkResponse.
        :type: str
        """

        self._ip_network_exchange = ip_network_exchange

    @property
    def name(self):
        """
        Gets the name of this IpNetworkResponse.
        The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>) of the IP network.

        :return: The name of this IpNetworkResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IpNetworkResponse.
        The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>) of the IP network.

        :param name: The name of this IpNetworkResponse.
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """
        Gets the tags of this IpNetworkResponse.
        Tags associated with the object.

        :return: The tags of this IpNetworkResponse.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IpNetworkResponse.
        Tags associated with the object.

        :param tags: The tags of this IpNetworkResponse.
        :type: list[str]
        """

        self._tags = tags

    @property
    def uri(self):
        """
        Gets the uri of this IpNetworkResponse.
        Uniform Resource Identifier

        :return: The uri of this IpNetworkResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this IpNetworkResponse.
        Uniform Resource Identifier

        :param uri: The uri of this IpNetworkResponse.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IpNetworkResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
