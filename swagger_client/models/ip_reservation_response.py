# coding: utf-8

"""
    IPReservations

    An IP reservation is the allocation of a public IP address from an IP address pool. After creating an IP reservation, you can associate it with an instance by using an IP association, to enable access between the Internet and the instance.<p>You can add, delete, update, and view IP reservations using the HTTP requests listed below.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IPReservationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'ip': 'str',
        'name': 'str',
        'parentpool': 'str',
        'permanent': 'bool',
        'quota': 'str',
        'tags': 'list[str]',
        'uri': 'str',
        'used': 'bool'
    }

    attribute_map = {
        'account': 'account',
        'ip': 'ip',
        'name': 'name',
        'parentpool': 'parentpool',
        'permanent': 'permanent',
        'quota': 'quota',
        'tags': 'tags',
        'uri': 'uri',
        'used': 'used'
    }

    def __init__(self, account=None, ip=None, name=None, parentpool=None, permanent=None, quota=None, tags=None, uri=None, used=None):
        """
        IPReservationResponse - a model defined in Swagger
        """

        self._account = None
        self._ip = None
        self._name = None
        self._parentpool = None
        self._permanent = None
        self._quota = None
        self._tags = None
        self._uri = None
        self._used = None

        if account is not None:
          self.account = account
        if ip is not None:
          self.ip = ip
        if name is not None:
          self.name = name
        if parentpool is not None:
          self.parentpool = parentpool
        if permanent is not None:
          self.permanent = permanent
        if quota is not None:
          self.quota = quota
        if tags is not None:
          self.tags = tags
        if uri is not None:
          self.uri = uri
        if used is not None:
          self.used = used

    @property
    def account(self):
        """
        Gets the account of this IPReservationResponse.
        Shows the default account for your identity domain.

        :return: The account of this IPReservationResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this IPReservationResponse.
        Shows the default account for your identity domain.

        :param account: The account of this IPReservationResponse.
        :type: str
        """

        self._account = account

    @property
    def ip(self):
        """
        Gets the ip of this IPReservationResponse.
        Public IP address.<p>An IP reservation is a public IP address that you can attach to an Oracle Compute Cloud Service instance that requires access to or from the Internet.

        :return: The ip of this IPReservationResponse.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this IPReservationResponse.
        Public IP address.<p>An IP reservation is a public IP address that you can attach to an Oracle Compute Cloud Service instance that requires access to or from the Internet.

        :param ip: The ip of this IPReservationResponse.
        :type: str
        """

        self._ip = ip

    @property
    def name(self):
        """
        Gets the name of this IPReservationResponse.
        <p>The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).

        :return: The name of this IPReservationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IPReservationResponse.
        <p>The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).

        :param name: The name of this IPReservationResponse.
        :type: str
        """

        self._name = name

    @property
    def parentpool(self):
        """
        Gets the parentpool of this IPReservationResponse.
        <code>/oracle/public/ippool</code><p>Pool of public IP addresses

        :return: The parentpool of this IPReservationResponse.
        :rtype: str
        """
        return self._parentpool

    @parentpool.setter
    def parentpool(self, parentpool):
        """
        Sets the parentpool of this IPReservationResponse.
        <code>/oracle/public/ippool</code><p>Pool of public IP addresses

        :param parentpool: The parentpool of this IPReservationResponse.
        :type: str
        """

        self._parentpool = parentpool

    @property
    def permanent(self):
        """
        Gets the permanent of this IPReservationResponse.
        <code>true</code> indicates that the IP reservation has a persistent public IP address. You can associate either a temporary or a persistent public IP address with an instance when you create the instance.<p>Temporary public IP addresses are assigned dynamically from a pool of public IP addresses. When you associate a temporary public IP address with an instance, if the instance is restarted or is deleted and created again later, its public IP address might change.

        :return: The permanent of this IPReservationResponse.
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """
        Sets the permanent of this IPReservationResponse.
        <code>true</code> indicates that the IP reservation has a persistent public IP address. You can associate either a temporary or a persistent public IP address with an instance when you create the instance.<p>Temporary public IP addresses are assigned dynamically from a pool of public IP addresses. When you associate a temporary public IP address with an instance, if the instance is restarted or is deleted and created again later, its public IP address might change.

        :param permanent: The permanent of this IPReservationResponse.
        :type: bool
        """

        self._permanent = permanent

    @property
    def quota(self):
        """
        Gets the quota of this IPReservationResponse.
        Not used

        :return: The quota of this IPReservationResponse.
        :rtype: str
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """
        Sets the quota of this IPReservationResponse.
        Not used

        :param quota: The quota of this IPReservationResponse.
        :type: str
        """

        self._quota = quota

    @property
    def tags(self):
        """
        Gets the tags of this IPReservationResponse.
        A comma-separated list of strings which helps you to identify IP reservation.

        :return: The tags of this IPReservationResponse.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IPReservationResponse.
        A comma-separated list of strings which helps you to identify IP reservation.

        :param tags: The tags of this IPReservationResponse.
        :type: list[str]
        """

        self._tags = tags

    @property
    def uri(self):
        """
        Gets the uri of this IPReservationResponse.
        Uniform Resource Identifier

        :return: The uri of this IPReservationResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this IPReservationResponse.
        Uniform Resource Identifier

        :param uri: The uri of this IPReservationResponse.
        :type: str
        """

        self._uri = uri

    @property
    def used(self):
        """
        Gets the used of this IPReservationResponse.
        <code>true</code> indicates that the IP reservation is associated with an instance.

        :return: The used of this IPReservationResponse.
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """
        Sets the used of this IPReservationResponse.
        <code>true</code> indicates that the IP reservation is associated with an instance.

        :param used: The used of this IPReservationResponse.
        :type: bool
        """

        self._used = used

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IPReservationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
