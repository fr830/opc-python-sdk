# coding: utf-8

"""
    IPReservations

    An IP reservation is the allocation of a public IP address from an IP address pool. After creating an IP reservation, you can associate it with an instance by using an IP association, to enable access between the Internet and the instance.<p>You can add, delete, update, and view IP reservations using the HTTP requests listed below.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IPReservationPostRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'parentpool': 'str',
        'permanent': 'bool',
        'tags': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'parentpool': 'parentpool',
        'permanent': 'permanent',
        'tags': 'tags'
    }

    def __init__(self, name=None, parentpool=None, permanent=None, tags=None):
        """
        IPReservationPostRequest - a model defined in Swagger
        """

        self._name = None
        self._parentpool = None
        self._permanent = None
        self._tags = None

        self.name = name
        self.parentpool = parentpool
        self.permanent = permanent
        if tags is not None:
          self.tags = tags

    @property
    def name(self):
        """
        Gets the name of this IPReservationPostRequest.
        <p>The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).<p>If you don't specify a name for this object, then the name is generated automatically.<p>Object names can contain only alphanumeric characters, hyphens, underscores, and periods. Object names are case-sensitive.

        :return: The name of this IPReservationPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IPReservationPostRequest.
        <p>The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).<p>If you don't specify a name for this object, then the name is generated automatically.<p>Object names can contain only alphanumeric characters, hyphens, underscores, and periods. Object names are case-sensitive.

        :param name: The name of this IPReservationPostRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parentpool(self):
        """
        Gets the parentpool of this IPReservationPostRequest.
        <code>/oracle/public/ippool</code><p>Pool of public IP addresses

        :return: The parentpool of this IPReservationPostRequest.
        :rtype: str
        """
        return self._parentpool

    @parentpool.setter
    def parentpool(self, parentpool):
        """
        Sets the parentpool of this IPReservationPostRequest.
        <code>/oracle/public/ippool</code><p>Pool of public IP addresses

        :param parentpool: The parentpool of this IPReservationPostRequest.
        :type: str
        """
        if parentpool is None:
            raise ValueError("Invalid value for `parentpool`, must not be `None`")

        self._parentpool = parentpool

    @property
    def permanent(self):
        """
        Gets the permanent of this IPReservationPostRequest.
        Set this to <code>true</code>. <code>true</code> indicates that the IP reservation has a persistent public IP address. You can associate either a temporary or a persistent public IP address with an instance when you create the instance.<p>Temporary public IP addresses are assigned dynamically from a pool of public IP addresses. When you associate a temporary public IP address with an instance, if the instance is restarted or is deleted and created again later, its public IP address might change.

        :return: The permanent of this IPReservationPostRequest.
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """
        Sets the permanent of this IPReservationPostRequest.
        Set this to <code>true</code>. <code>true</code> indicates that the IP reservation has a persistent public IP address. You can associate either a temporary or a persistent public IP address with an instance when you create the instance.<p>Temporary public IP addresses are assigned dynamically from a pool of public IP addresses. When you associate a temporary public IP address with an instance, if the instance is restarted or is deleted and created again later, its public IP address might change.

        :param permanent: The permanent of this IPReservationPostRequest.
        :type: bool
        """
        if permanent is None:
            raise ValueError("Invalid value for `permanent`, must not be `None`")

        self._permanent = permanent

    @property
    def tags(self):
        """
        Gets the tags of this IPReservationPostRequest.
        A comma-separated list of strings which helps you to identify IP reservations.

        :return: The tags of this IPReservationPostRequest.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IPReservationPostRequest.
        A comma-separated list of strings which helps you to identify IP reservations.

        :param tags: The tags of this IPReservationPostRequest.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IPReservationPostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
