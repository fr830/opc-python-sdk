# coding: utf-8

"""
    IPNetworks

     An IP network allows you to define an IP subnet in your account. The size of the IP subnet and the set IP addresses in the subnet are determined by the IP address prefix that you specify while creating the IP network. These IP addresses aren't part of the common pool of Oracle-provided IP addresses used by the shared network. When you add an instance to an IP network, the instance is assigned an IP address in that subnet. You can assign IP addresses to instances either statically or dynamically, depending on your business needs. So you have complete control over the IP addresses assigned to your instances. For more information, see <a target=\"_blank\" href=\"http://www.oracle.com/pls/topic/lookup?ctx=stcomputecs&id=STCSG-GUID-B62FE52B-CD56-43D9-AB42-354D5C8C5AA1\">Managing IP Networks</a> in <em>Using Oracle Compute Cloud Service (IaaS)</em>

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpNetworkPostRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, ip_address_prefix=None, ip_network_exchange=None, name=None, tags=None):
        """
        IpNetworkPostRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'ip_address_prefix': 'str',
            'ip_network_exchange': 'str',
            'name': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'description': 'description',
            'ip_address_prefix': 'ipAddressPrefix',
            'ip_network_exchange': 'ipNetworkExchange',
            'name': 'name',
            'tags': 'tags'
        }

        self._description = description
        self._ip_address_prefix = ip_address_prefix
        self._ip_network_exchange = ip_network_exchange
        self._name = name
        self._tags = tags

    @property
    def description(self):
        """
        Gets the description of this IpNetworkPostRequest.
        Description of the object.

        :return: The description of this IpNetworkPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this IpNetworkPostRequest.
        Description of the object.

        :param description: The description of this IpNetworkPostRequest.
        :type: str
        """

        self._description = description

    @property
    def ip_address_prefix(self):
        """
        Gets the ip_address_prefix of this IpNetworkPostRequest.
        Specify the size of the IP subnet. It is a range of IPv4 addresses assigned in the virtual network, in CIDR address prefix format.<p>While specifying the IP address prefix take care of the following points:<p>* These IP addresses aren't part of the common pool of Oracle-provided IP addresses used by the shared network.<p>* There's no conflict with the range of IP addresses used in another IP network, the IP addresses used your on-premises network, or with the range of private IP addresses used in the shared network. If IP networks with overlapping IP subnets are linked to an IP exchange, packets going to and from those IP networks are dropped.<p>* The upper limit of the CIDR block size for an IP network is /16.<p>Note: The first IP address of any IP network is reserved for the default gateway, the DHCP server, and the DNS server of that IP network. 

        :return: The ip_address_prefix of this IpNetworkPostRequest.
        :rtype: str
        """
        return self._ip_address_prefix

    @ip_address_prefix.setter
    def ip_address_prefix(self, ip_address_prefix):
        """
        Sets the ip_address_prefix of this IpNetworkPostRequest.
        Specify the size of the IP subnet. It is a range of IPv4 addresses assigned in the virtual network, in CIDR address prefix format.<p>While specifying the IP address prefix take care of the following points:<p>* These IP addresses aren't part of the common pool of Oracle-provided IP addresses used by the shared network.<p>* There's no conflict with the range of IP addresses used in another IP network, the IP addresses used your on-premises network, or with the range of private IP addresses used in the shared network. If IP networks with overlapping IP subnets are linked to an IP exchange, packets going to and from those IP networks are dropped.<p>* The upper limit of the CIDR block size for an IP network is /16.<p>Note: The first IP address of any IP network is reserved for the default gateway, the DHCP server, and the DNS server of that IP network. 

        :param ip_address_prefix: The ip_address_prefix of this IpNetworkPostRequest.
        :type: str
        """
        if ip_address_prefix is None:
            raise ValueError("Invalid value for `ip_address_prefix`, must not be `None`")

        self._ip_address_prefix = ip_address_prefix

    @property
    def ip_network_exchange(self):
        """
        Gets the ip_network_exchange of this IpNetworkPostRequest.
        Specify the IP network exchange to which the IP network belongs. You can add an IP network to only one IP network exchange, but an IP network exchange can include multiple IP networks. An IP network exchange enables access between IP networks that have non-overlapping addresses, so that instances on these networks can exchange packets with each other without NAT. 

        :return: The ip_network_exchange of this IpNetworkPostRequest.
        :rtype: str
        """
        return self._ip_network_exchange

    @ip_network_exchange.setter
    def ip_network_exchange(self, ip_network_exchange):
        """
        Sets the ip_network_exchange of this IpNetworkPostRequest.
        Specify the IP network exchange to which the IP network belongs. You can add an IP network to only one IP network exchange, but an IP network exchange can include multiple IP networks. An IP network exchange enables access between IP networks that have non-overlapping addresses, so that instances on these networks can exchange packets with each other without NAT. 

        :param ip_network_exchange: The ip_network_exchange of this IpNetworkPostRequest.
        :type: str
        """

        self._ip_network_exchange = ip_network_exchange

    @property
    def name(self):
        """
        Gets the name of this IpNetworkPostRequest.
        The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>) of the IP network. <p>Object names can contain only alphanumeric, underscore (_), dash (-), and period (.) characters. Object names are case-sensitive.

        :return: The name of this IpNetworkPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IpNetworkPostRequest.
        The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>) of the IP network. <p>Object names can contain only alphanumeric, underscore (_), dash (-), and period (.) characters. Object names are case-sensitive.

        :param name: The name of this IpNetworkPostRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tags(self):
        """
        Gets the tags of this IpNetworkPostRequest.
        Tags associated with the object.

        :return: The tags of this IpNetworkPostRequest.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this IpNetworkPostRequest.
        Tags associated with the object.

        :param tags: The tags of this IpNetworkPostRequest.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IpNetworkPostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
