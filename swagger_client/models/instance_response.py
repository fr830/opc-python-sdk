# coding: utf-8

"""
    Instances

    An Oracle Compute Cloud Service instance is a virtual machine running a specific operating system and with CPU and memory resources that you specify. See <a target=\"_blank\" href=\"http://www.oracle.com/pls/topic/lookup?ctx=stcomputecs&id=STCSG-GUID-F928F362-2DB6-4E45-843F-C269E0740A36\">About Instances</a> in <em>Using Oracle Compute Cloud Service (IaaS)</em>.<p>You can view and delete instances using the HTTP requests listed below.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstanceResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'attributes': 'dict(str, str)',
        'availability_domain': 'str',
        'boot_order': 'list[int]',
        'desired_state': 'str',
        'disk_attach': 'str',
        'domain': 'str',
        'entry': 'int',
        'error_reason': 'str',
        'fingerprint': 'str',
        'hostname': 'str',
        'hypervisor': 'dict(str, str)',
        'image_format': 'str',
        'imagelist': 'str',
        'ip': 'str',
        'label': 'str',
        'name': 'str',
        'networking': 'dict(str, object)',
        'placement_requirements': 'list[str]',
        'platform': 'str',
        'priority': 'str',
        'quota': 'str',
        'quota_reservation': 'str',
        'relationships': 'list[dict(str, str)]',
        'resolvers': 'list[str]',
        'reverse_dns': 'bool',
        'shape': 'str',
        'site': 'str',
        'sshkeys': 'list[str]',
        'start_time': 'str',
        'state': 'str',
        'storage_attachments': 'list[str]',
        'tags': 'list[str]',
        'uri': 'str',
        'vcable_id': 'str',
        'virtio': 'bool',
        'vnc': 'str'
    }

    attribute_map = {
        'account': 'account',
        'attributes': 'attributes',
        'availability_domain': 'availability_domain',
        'boot_order': 'boot_order',
        'desired_state': 'desired_state',
        'disk_attach': 'disk_attach',
        'domain': 'domain',
        'entry': 'entry',
        'error_reason': 'error_reason',
        'fingerprint': 'fingerprint',
        'hostname': 'hostname',
        'hypervisor': 'hypervisor',
        'image_format': 'image_format',
        'imagelist': 'imagelist',
        'ip': 'ip',
        'label': 'label',
        'name': 'name',
        'networking': 'networking',
        'placement_requirements': 'placement_requirements',
        'platform': 'platform',
        'priority': 'priority',
        'quota': 'quota',
        'quota_reservation': 'quota_reservation',
        'relationships': 'relationships',
        'resolvers': 'resolvers',
        'reverse_dns': 'reverse_dns',
        'shape': 'shape',
        'site': 'site',
        'sshkeys': 'sshkeys',
        'start_time': 'start_time',
        'state': 'state',
        'storage_attachments': 'storage_attachments',
        'tags': 'tags',
        'uri': 'uri',
        'vcable_id': 'vcable_id',
        'virtio': 'virtio',
        'vnc': 'vnc'
    }

    def __init__(self, account=None, attributes=None, availability_domain=None, boot_order=None, desired_state=None, disk_attach=None, domain=None, entry=None, error_reason=None, fingerprint=None, hostname=None, hypervisor=None, image_format=None, imagelist=None, ip=None, label=None, name=None, networking=None, placement_requirements=None, platform=None, priority=None, quota=None, quota_reservation=None, relationships=None, resolvers=None, reverse_dns=None, shape=None, site=None, sshkeys=None, start_time=None, state=None, storage_attachments=None, tags=None, uri=None, vcable_id=None, virtio=None, vnc=None):
        """
        InstanceResponse - a model defined in Swagger
        """

        self._account = None
        self._attributes = None
        self._availability_domain = None
        self._boot_order = None
        self._desired_state = None
        self._disk_attach = None
        self._domain = None
        self._entry = None
        self._error_reason = None
        self._fingerprint = None
        self._hostname = None
        self._hypervisor = None
        self._image_format = None
        self._imagelist = None
        self._ip = None
        self._label = None
        self._name = None
        self._networking = None
        self._placement_requirements = None
        self._platform = None
        self._priority = None
        self._quota = None
        self._quota_reservation = None
        self._relationships = None
        self._resolvers = None
        self._reverse_dns = None
        self._shape = None
        self._site = None
        self._sshkeys = None
        self._start_time = None
        self._state = None
        self._storage_attachments = None
        self._tags = None
        self._uri = None
        self._vcable_id = None
        self._virtio = None
        self._vnc = None

        if account is not None:
          self.account = account
        if attributes is not None:
          self.attributes = attributes
        if availability_domain is not None:
          self.availability_domain = availability_domain
        if boot_order is not None:
          self.boot_order = boot_order
        if desired_state is not None:
          self.desired_state = desired_state
        if disk_attach is not None:
          self.disk_attach = disk_attach
        if domain is not None:
          self.domain = domain
        if entry is not None:
          self.entry = entry
        if error_reason is not None:
          self.error_reason = error_reason
        if fingerprint is not None:
          self.fingerprint = fingerprint
        if hostname is not None:
          self.hostname = hostname
        if hypervisor is not None:
          self.hypervisor = hypervisor
        if image_format is not None:
          self.image_format = image_format
        if imagelist is not None:
          self.imagelist = imagelist
        if ip is not None:
          self.ip = ip
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if networking is not None:
          self.networking = networking
        if placement_requirements is not None:
          self.placement_requirements = placement_requirements
        if platform is not None:
          self.platform = platform
        if priority is not None:
          self.priority = priority
        if quota is not None:
          self.quota = quota
        if quota_reservation is not None:
          self.quota_reservation = quota_reservation
        if relationships is not None:
          self.relationships = relationships
        if resolvers is not None:
          self.resolvers = resolvers
        if reverse_dns is not None:
          self.reverse_dns = reverse_dns
        if shape is not None:
          self.shape = shape
        if site is not None:
          self.site = site
        if sshkeys is not None:
          self.sshkeys = sshkeys
        if start_time is not None:
          self.start_time = start_time
        if state is not None:
          self.state = state
        if storage_attachments is not None:
          self.storage_attachments = storage_attachments
        if tags is not None:
          self.tags = tags
        if uri is not None:
          self.uri = uri
        if vcable_id is not None:
          self.vcable_id = vcable_id
        if virtio is not None:
          self.virtio = virtio
        if vnc is not None:
          self.vnc = vnc

    @property
    def account(self):
        """
        Gets the account of this InstanceResponse.
        Shows the default account for your identity domain.

        :return: The account of this InstanceResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this InstanceResponse.
        Shows the default account for your identity domain.

        :param account: The account of this InstanceResponse.
        :type: str
        """

        self._account = account

    @property
    def attributes(self):
        """
        Gets the attributes of this InstanceResponse.
        A dictionary of attributes to be made available to the instance. A value with the key \"userdata\" will be made available in an EC2-compatible manner.

        :return: The attributes of this InstanceResponse.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this InstanceResponse.
        A dictionary of attributes to be made available to the instance. A value with the key \"userdata\" will be made available in an EC2-compatible manner.

        :param attributes: The attributes of this InstanceResponse.
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def availability_domain(self):
        """
        Gets the availability_domain of this InstanceResponse.
        The availability domain the instance is in

        :return: The availability_domain of this InstanceResponse.
        :rtype: str
        """
        return self._availability_domain

    @availability_domain.setter
    def availability_domain(self, availability_domain):
        """
        Sets the availability_domain of this InstanceResponse.
        The availability domain the instance is in

        :param availability_domain: The availability_domain of this InstanceResponse.
        :type: str
        """

        self._availability_domain = availability_domain

    @property
    def boot_order(self):
        """
        Gets the boot_order of this InstanceResponse.
        Boot order list.

        :return: The boot_order of this InstanceResponse.
        :rtype: list[int]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """
        Sets the boot_order of this InstanceResponse.
        Boot order list.

        :param boot_order: The boot_order of this InstanceResponse.
        :type: list[int]
        """

        self._boot_order = boot_order

    @property
    def desired_state(self):
        """
        Gets the desired_state of this InstanceResponse.
        Desired state for the instance. The value can be <code>shutdown</code> or <code>running</code> to shutdown an instance or to restart a previously shutdown instance respectively.

        :return: The desired_state of this InstanceResponse.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """
        Sets the desired_state of this InstanceResponse.
        Desired state for the instance. The value can be <code>shutdown</code> or <code>running</code> to shutdown an instance or to restart a previously shutdown instance respectively.

        :param desired_state: The desired_state of this InstanceResponse.
        :type: str
        """

        self._desired_state = desired_state

    @property
    def disk_attach(self):
        """
        Gets the disk_attach of this InstanceResponse.
        A label assigned by the user to identify disks.

        :return: The disk_attach of this InstanceResponse.
        :rtype: str
        """
        return self._disk_attach

    @disk_attach.setter
    def disk_attach(self, disk_attach):
        """
        Sets the disk_attach of this InstanceResponse.
        A label assigned by the user to identify disks.

        :param disk_attach: The disk_attach of this InstanceResponse.
        :type: str
        """

        self._disk_attach = disk_attach

    @property
    def domain(self):
        """
        Gets the domain of this InstanceResponse.
        The default domain to use for the hostname and for DNS lookups.

        :return: The domain of this InstanceResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this InstanceResponse.
        The default domain to use for the hostname and for DNS lookups.

        :param domain: The domain of this InstanceResponse.
        :type: str
        """

        self._domain = domain

    @property
    def entry(self):
        """
        Gets the entry of this InstanceResponse.
        Optional imagelistentry number (default will be used if not specified).

        :return: The entry of this InstanceResponse.
        :rtype: int
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """
        Sets the entry of this InstanceResponse.
        Optional imagelistentry number (default will be used if not specified).

        :param entry: The entry of this InstanceResponse.
        :type: int
        """

        self._entry = entry

    @property
    def error_reason(self):
        """
        Gets the error_reason of this InstanceResponse.
        The reason for the instance going to error state, if available.

        :return: The error_reason of this InstanceResponse.
        :rtype: str
        """
        return self._error_reason

    @error_reason.setter
    def error_reason(self, error_reason):
        """
        Sets the error_reason of this InstanceResponse.
        The reason for the instance going to error state, if available.

        :param error_reason: The error_reason of this InstanceResponse.
        :type: str
        """

        self._error_reason = error_reason

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this InstanceResponse.
        SSH server fingerprint presented by the instance.

        :return: The fingerprint of this InstanceResponse.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this InstanceResponse.
        SSH server fingerprint presented by the instance.

        :param fingerprint: The fingerprint of this InstanceResponse.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def hostname(self):
        """
        Gets the hostname of this InstanceResponse.
        The hostname for this instance.

        :return: The hostname of this InstanceResponse.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this InstanceResponse.
        The hostname for this instance.

        :param hostname: The hostname of this InstanceResponse.
        :type: str
        """

        self._hostname = hostname

    @property
    def hypervisor(self):
        """
        Gets the hypervisor of this InstanceResponse.
        A dictionary of hypervisor-specific attributes.

        :return: The hypervisor of this InstanceResponse.
        :rtype: dict(str, str)
        """
        return self._hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):
        """
        Sets the hypervisor of this InstanceResponse.
        A dictionary of hypervisor-specific attributes.

        :param hypervisor: The hypervisor of this InstanceResponse.
        :type: dict(str, str)
        """

        self._hypervisor = hypervisor

    @property
    def image_format(self):
        """
        Gets the image_format of this InstanceResponse.
        The format of the image.

        :return: The image_format of this InstanceResponse.
        :rtype: str
        """
        return self._image_format

    @image_format.setter
    def image_format(self, image_format):
        """
        Sets the image_format of this InstanceResponse.
        The format of the image.

        :param image_format: The image_format of this InstanceResponse.
        :type: str
        """

        self._image_format = image_format

    @property
    def imagelist(self):
        """
        Gets the imagelist of this InstanceResponse.
        Name of imagelist to be launched.

        :return: The imagelist of this InstanceResponse.
        :rtype: str
        """
        return self._imagelist

    @imagelist.setter
    def imagelist(self, imagelist):
        """
        Sets the imagelist of this InstanceResponse.
        Name of imagelist to be launched.

        :param imagelist: The imagelist of this InstanceResponse.
        :type: str
        """

        self._imagelist = imagelist

    @property
    def ip(self):
        """
        Gets the ip of this InstanceResponse.
        IP address of the instance.

        :return: The ip of this InstanceResponse.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this InstanceResponse.
        IP address of the instance.

        :param ip: The ip of this InstanceResponse.
        :type: str
        """

        self._ip = ip

    @property
    def label(self):
        """
        Gets the label of this InstanceResponse.
        A label assigned by the user, specifically for defining inter-instance relationships.

        :return: The label of this InstanceResponse.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this InstanceResponse.
        A label assigned by the user, specifically for defining inter-instance relationships.

        :param label: The label of this InstanceResponse.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this InstanceResponse.
        Multipart name of the instance.

        :return: The name of this InstanceResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InstanceResponse.
        Multipart name of the instance.

        :param name: The name of this InstanceResponse.
        :type: str
        """

        self._name = name

    @property
    def networking(self):
        """
        Gets the networking of this InstanceResponse.
        Mapping of <device name> to network specifiers for virtual NICs to be attached to this instance.

        :return: The networking of this InstanceResponse.
        :rtype: dict(str, object)
        """
        return self._networking

    @networking.setter
    def networking(self, networking):
        """
        Sets the networking of this InstanceResponse.
        Mapping of <device name> to network specifiers for virtual NICs to be attached to this instance.

        :param networking: The networking of this InstanceResponse.
        :type: dict(str, object)
        """

        self._networking = networking

    @property
    def placement_requirements(self):
        """
        Gets the placement_requirements of this InstanceResponse.
        A list of strings specifying arbitrary tags on nodes to be matched on placement.

        :return: The placement_requirements of this InstanceResponse.
        :rtype: list[str]
        """
        return self._placement_requirements

    @placement_requirements.setter
    def placement_requirements(self, placement_requirements):
        """
        Sets the placement_requirements of this InstanceResponse.
        A list of strings specifying arbitrary tags on nodes to be matched on placement.

        :param placement_requirements: The placement_requirements of this InstanceResponse.
        :type: list[str]
        """

        self._placement_requirements = placement_requirements

    @property
    def platform(self):
        """
        Gets the platform of this InstanceResponse.
        The OS platform for the instance.

        :return: The platform of this InstanceResponse.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this InstanceResponse.
        The OS platform for the instance.

        :param platform: The platform of this InstanceResponse.
        :type: str
        """

        self._platform = platform

    @property
    def priority(self):
        """
        Gets the priority of this InstanceResponse.
        The priority at which this instance will be run.

        :return: The priority of this InstanceResponse.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this InstanceResponse.
        The priority at which this instance will be run.

        :param priority: The priority of this InstanceResponse.
        :type: str
        """

        self._priority = priority

    @property
    def quota(self):
        """
        Gets the quota of this InstanceResponse.
        Not used

        :return: The quota of this InstanceResponse.
        :rtype: str
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """
        Sets the quota of this InstanceResponse.
        Not used

        :param quota: The quota of this InstanceResponse.
        :type: str
        """

        self._quota = quota

    @property
    def quota_reservation(self):
        """
        Gets the quota_reservation of this InstanceResponse.
        Reference to the QuotaReservation, to be destroyed with the instance.

        :return: The quota_reservation of this InstanceResponse.
        :rtype: str
        """
        return self._quota_reservation

    @quota_reservation.setter
    def quota_reservation(self, quota_reservation):
        """
        Sets the quota_reservation of this InstanceResponse.
        Reference to the QuotaReservation, to be destroyed with the instance.

        :param quota_reservation: The quota_reservation of this InstanceResponse.
        :type: str
        """

        self._quota_reservation = quota_reservation

    @property
    def relationships(self):
        """
        Gets the relationships of this InstanceResponse.
        A list of relationship specifications to be satisfied on this instance's placement

        :return: The relationships of this InstanceResponse.
        :rtype: list[dict(str, str)]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """
        Sets the relationships of this InstanceResponse.
        A list of relationship specifications to be satisfied on this instance's placement

        :param relationships: The relationships of this InstanceResponse.
        :type: list[dict(str, str)]
        """

        self._relationships = relationships

    @property
    def resolvers(self):
        """
        Gets the resolvers of this InstanceResponse.
        Resolvers to use instead of the default resolvers.

        :return: The resolvers of this InstanceResponse.
        :rtype: list[str]
        """
        return self._resolvers

    @resolvers.setter
    def resolvers(self, resolvers):
        """
        Sets the resolvers of this InstanceResponse.
        Resolvers to use instead of the default resolvers.

        :param resolvers: The resolvers of this InstanceResponse.
        :type: list[str]
        """

        self._resolvers = resolvers

    @property
    def reverse_dns(self):
        """
        Gets the reverse_dns of this InstanceResponse.
        Add PTR records for the hostname.

        :return: The reverse_dns of this InstanceResponse.
        :rtype: bool
        """
        return self._reverse_dns

    @reverse_dns.setter
    def reverse_dns(self, reverse_dns):
        """
        Sets the reverse_dns of this InstanceResponse.
        Add PTR records for the hostname.

        :param reverse_dns: The reverse_dns of this InstanceResponse.
        :type: bool
        """

        self._reverse_dns = reverse_dns

    @property
    def shape(self):
        """
        Gets the shape of this InstanceResponse.
        Type of instance, as defined on site configuration.

        :return: The shape of this InstanceResponse.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """
        Sets the shape of this InstanceResponse.
        Type of instance, as defined on site configuration.

        :param shape: The shape of this InstanceResponse.
        :type: str
        """

        self._shape = shape

    @property
    def site(self):
        """
        Gets the site of this InstanceResponse.
        Site to run on.

        :return: The site of this InstanceResponse.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this InstanceResponse.
        Site to run on.

        :param site: The site of this InstanceResponse.
        :type: str
        """

        self._site = site

    @property
    def sshkeys(self):
        """
        Gets the sshkeys of this InstanceResponse.
        SSH keys that will be exposed to the instance.

        :return: The sshkeys of this InstanceResponse.
        :rtype: list[str]
        """
        return self._sshkeys

    @sshkeys.setter
    def sshkeys(self, sshkeys):
        """
        Sets the sshkeys of this InstanceResponse.
        SSH keys that will be exposed to the instance.

        :param sshkeys: The sshkeys of this InstanceResponse.
        :type: list[str]
        """

        self._sshkeys = sshkeys

    @property
    def start_time(self):
        """
        Gets the start_time of this InstanceResponse.
        Start time of the instance.

        :return: The start_time of this InstanceResponse.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InstanceResponse.
        Start time of the instance.

        :param start_time: The start_time of this InstanceResponse.
        :type: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """
        Gets the state of this InstanceResponse.
        State of the instance.

        :return: The state of this InstanceResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this InstanceResponse.
        State of the instance.

        :param state: The state of this InstanceResponse.
        :type: str
        """

        self._state = state

    @property
    def storage_attachments(self):
        """
        Gets the storage_attachments of this InstanceResponse.
        List of dictionaries containing storage attachment Information.

        :return: The storage_attachments of this InstanceResponse.
        :rtype: list[str]
        """
        return self._storage_attachments

    @storage_attachments.setter
    def storage_attachments(self, storage_attachments):
        """
        Sets the storage_attachments of this InstanceResponse.
        List of dictionaries containing storage attachment Information.

        :param storage_attachments: The storage_attachments of this InstanceResponse.
        :type: list[str]
        """

        self._storage_attachments = storage_attachments

    @property
    def tags(self):
        """
        Gets the tags of this InstanceResponse.
        Comma-separated list of strings used to tag the instance.

        :return: The tags of this InstanceResponse.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this InstanceResponse.
        Comma-separated list of strings used to tag the instance.

        :param tags: The tags of this InstanceResponse.
        :type: list[str]
        """

        self._tags = tags

    @property
    def uri(self):
        """
        Gets the uri of this InstanceResponse.
        Uniform Resource Identifier

        :return: The uri of this InstanceResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this InstanceResponse.
        Uniform Resource Identifier

        :param uri: The uri of this InstanceResponse.
        :type: str
        """

        self._uri = uri

    @property
    def vcable_id(self):
        """
        Gets the vcable_id of this InstanceResponse.
        vCable for this instance.

        :return: The vcable_id of this InstanceResponse.
        :rtype: str
        """
        return self._vcable_id

    @vcable_id.setter
    def vcable_id(self, vcable_id):
        """
        Sets the vcable_id of this InstanceResponse.
        vCable for this instance.

        :param vcable_id: The vcable_id of this InstanceResponse.
        :type: str
        """

        self._vcable_id = vcable_id

    @property
    def virtio(self):
        """
        Gets the virtio of this InstanceResponse.
        Specify if the devices created for the instance are virtio devices. If not specified, the default will come from the cluster configration file.

        :return: The virtio of this InstanceResponse.
        :rtype: bool
        """
        return self._virtio

    @virtio.setter
    def virtio(self, virtio):
        """
        Sets the virtio of this InstanceResponse.
        Specify if the devices created for the instance are virtio devices. If not specified, the default will come from the cluster configration file.

        :param virtio: The virtio of this InstanceResponse.
        :type: bool
        """

        self._virtio = virtio

    @property
    def vnc(self):
        """
        Gets the vnc of this InstanceResponse.
        IP address and port of the VNC console for the instance.

        :return: The vnc of this InstanceResponse.
        :rtype: str
        """
        return self._vnc

    @vnc.setter
    def vnc(self, vnc):
        """
        Sets the vnc of this InstanceResponse.
        IP address and port of the VNC console for the instance.

        :param vnc: The vnc of this InstanceResponse.
        :type: str
        """

        self._vnc = vnc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
